#!/usr/bin/env bash

set -Eeuo pipefail

unrecognised_command() {
	echo "Unrecognised command: $*"
	exit 1
}

curl_check() {
	declare response_body
	response_body="$(mktemp)"
	declare -i status_code expected_status_code="$1"
	shift

	status_code="$(curl -sS -o "$response_body" -w '%{http_code}' "$@")"

	if [[ "$status_code" -ne "$expected_status_code" ]]; then
		>&2 echo "Unexpected status code $status_code (expected $expected_status_code)"
		exit 2
	fi

	cat "$response_body"
}

issue_get() {
	declare issue_id="$1"

	curl_check 200 \
		-X GET \
		-u "${jira_username}:${jira_password}" \
		"${jira_base_url}/issue/${issue_id}"
}

issue_create() {
	curl_check 201 \
		-X POST \
		-u "${jira_username}:${jira_password}" \
		-H 'Content-Type: application/json' \
		-d@- \
		"${jira_base_url}/issue" < "${filename:-/dev/stdin}"
}

issue_remotelink_create() {
	declare issue_id="$1"

	curl_check 201 \
		-X POST \
		-u "${jira_username}:${jira_password}" \
		-H 'Content-Type: application/json' \
		-d@- \
		"${jira_base_url}/issue/${issue_id}/remotelink" < "${filename:-/dev/stdin}"
}

issue_tosprint() {
	declare issue_id="$1"
	declare sprint_id="$2"

	curl_check 204 \
		-X POST \
		-u "${jira_username}:${jira_password}" \
		-H 'Content-Type: application/json' \
		-d "{ \"issues\": [ \"${issue_id}\" ] }" \
		"${jira_agile_base_url}/sprint/${sprint_id}/issue"
}

issue_link_pr() {
	declare \
		issue_key="$1" \
		pr_url="$2" \
		pr_remotelink_payload \
		pr_payload \
		pr_api_url \
		pr_title \
		pr_base_repo_fullname \
		pr_number
	pr_remotelink_payload="$(mktemp)"
	pr_payload="$(mktemp)"

	pr_api_url="${pr_url/github.com/api.github.com\/repos}"
	pr_api_url="${pr_api_url/pull/pulls}"

	curl_check 200 \
		-X GET \
		-H 'Accept: application/vnd.github.v3+json' \
		"$pr_api_url" > "$pr_payload"

	pr_title="$(jq -r '.title' "$pr_payload")"
	pr_base_repo_fullname="$(jq -r '.base.repo.full_name' "$pr_payload")"
	pr_number="$(jq -r '.number' "$pr_payload")"

	cat <<EOF > "$pr_remotelink_payload"
{
    "relationship": "Github Pull Request",
    "object": {
        "title": "${pr_base_repo_fullname}#${pr_number}",
	"summary": "${pr_title}",
        "url": "${pr_url}",
	"icon": {
          "url16x16": "https://github.githubassets.com/favicon.ico"
        }
    }
}
EOF

	issue_remotelink_create "$issue_key" < "$pr_remotelink_payload" > /dev/null
}

handle_issue() {
	case $1 in
		get)      shift; issue_get "$@"      ;;
		create)   shift; issue_create "$@"   ;;
		tosprint) shift; issue_tosprint "$@" ;;
		pr)       shift; issue_link_pr "$@"  ;;
		*)        unrecognised_command "$@"  ;;
	esac
}

sprint_get() {
	curl_check 200 \
		-X GET \
		-u "${jira_username}:${jira_password}" \
		"${jira_agile_base_url}/board/${jira_board:-$default_jira_board}/sprint?state=active"
	}

handle_sprint() {
	case $1 in
		get) shift; sprint_get "$@"    ;;
		*)   unrecognised_command "$@" ;;
	esac
}

bz_get() {
	declare bz_id="$1"

	curl_check 200 \
		-X GET \
		"https://bugzilla.redhat.com/rest/bug/${bz_id}"
}

bz_tojira() {
	declare bz_id="$1"
	declare \
		issue_payload \
		issue_remotelink_payload \
		bz_payload \
		bz_summary \
		issue_response_payload \
		issue_id

	issue_payload=$(mktemp)
	issue_remotelink_payload=$(mktemp)
	bz_payload="$(mktemp)"
	issue_response_payload="$(mktemp)"

	bz_get "$bz_id" > "$bz_payload"
	bz_summary="$(jq -r '.bugs[0].summary' "$bz_payload" | sed $'s|"|\'|g')"

	cat <<EOF > "$issue_payload"
{
  "fields": {
    "project": {
      "id": "$jira_project"
    },
    "summary": "Bug ${bz_id}: ${bz_summary}",
    "issuetype": {
      "id": "1"
    },
    "reporter": {
      "name": "$jira_username"
    },
    "components": [
      {
        "id": "$jira_component"
      }
    ]
  }
}
EOF

	cat <<EOF > "$issue_remotelink_payload"
{
    "relationship": "Bugzilla",
    "object": {
        "title": "Bug ${bz_id}",
	"summary": "${bz_summary}",
        "url": "https://bugzilla.redhat.com/show_bug.cgi?id=${bz_id}",
	"icon": {
          "url16x16": "https://bugzilla.redhat.com/extensions/RedHat/web/css/favicons/production.ico"
}
    }
}
EOF

	issue_create < "$issue_payload" | tee "$issue_response_payload"

	issue_id="$(jq -r '.key' "$issue_response_payload")"
	issue_remotelink_create "$issue_id" < "$issue_remotelink_payload" > /dev/null
}

bzs_tojira() {
	declare to_sprint=false

	while getopts s o; do
		case "$o" in
			s) to_sprint=true     ;;
			*) print_help; exit 1 ;;
		esac
	done

	declare current_sprint
	current_sprint="$(sprint_get | jq '.values[0].id')"


	for bz_id in "${@:$OPTIND}"; do
		declare issue
		issue="$(mktemp)"

		bz_tojira "$bz_id" > "$issue"

		if [ "$to_sprint" = true ]; then
			issue_tosprint "$(jq -r '.key' "$issue")" "$current_sprint"
		fi

		cat "$issue"
	done
}

handle_bz() {
	case $1 in
		get) shift; bz_get "$@"        ;;
		new) shift; bzs_tojira "$@"    ;;
		*)   unrecognised_command "$@" ;;
	esac
}

print_help() {
	echo -e "Add a new Jira card in the sprint for a Bugzilla bug."
	echo
	echo -e "Required configuration:"
	echo
	echo -e "JIRA_USERNAME (or flag -u): Your Jira username."
	echo -e "JIRA_PASSWORD (or flag -p): Your Red Hat developer account password."
	echo
	echo -e "Use:"
	echo -e "\t${0} bz new [-s] <bz_id>..."
	echo
	echo -e "\t-s\t add the Jira card to the current sprint."
}

validate_configuration() {
	declare -a required_values=("jira_username" "jira_password")
	declare fail=false

	for val in "${required_values[@]}"; do
		declare required=${!val}
		if [ -z "${required}" ]; then
			echo "Required variable '${val}' not found."
			fail=true
		fi
	done

	if [ "$fail" = true ]; then
		exit 1
	fi
}

# Set default configuration
default_jira_workspace='issues.redhat.com'
default_jira_board='5266'
default_jira_project='12323208'
default_jira_component='12333963'

# Apply environment variables to configuration
jira_workspace="${JIRA_WORKSPACE:-$default_jira_workspace}"
jira_project="${JIRA_PROJECT:-$default_jira_project}"
jira_board="${JIRA_BOARD:-$default_jira_board}"
# shellcheck disable=SC2153
jira_username="${JIRA_USERNAME}"
# shellcheck disable=SC2153
jira_password="${JIRA_PASSWORD}"
jira_component="${JIRA_COMPONENT:-$default_jira_component}"

# Apply flags overrides to configuration
while getopts u:p:w:b:c:f:h o; do
	case "$o" in
		u) jira_username="$OPTARG"  ;;
		p) jira_password="$OPTARG"  ;;
		w) jira_workspace="$OPTARG" ;;
		b) jira_board="$OPTARG"     ;;
		c) jira_component="$OPTARG" ;;
		f) filename="$OPTARG"       ;;
		h) print_help; exit 0       ;;
		*) print_help; exit 1       ;;
	esac
done

validate_configuration

jira_base_url="https://${jira_workspace:-$default_jira_workspace}/rest/api/2"
jira_agile_base_url="https://${jira_workspace:-$default_jira_workspace}/rest/agile/1.0"

# Process subcommands
case ${@:$OPTIND:1} in
	issue|i)     handle_issue "${@:$((OPTIND+1))}"         ;;
	sprint|s)    handle_sprint "${@:$((OPTIND+1))}"        ;;
	bugzilla|bz) handle_bz "${@:$((OPTIND+1))}"            ;;
	help)        print_help; exit 0                         ;;
	*)           unrecognised_command "${@:$((OPTIND+1))}" ;;
esac
